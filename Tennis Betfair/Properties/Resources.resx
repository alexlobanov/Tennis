<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="green" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\green.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="jsAllLoad" xml:space="preserve">
    <value>function suscribeEventsScores() {
    if ($('.yellow.last.ml13-ScoreBoardColumn').length == 0)
        return false;
    if ($('.ml13-Anims_H3Text').length == 0)
        return false;
    $('.yellow.last.ml13-ScoreBoardColumn').bind("DOMSubtreeModified",function(){
        var players = $('.ml13-ScoreBoard_HeaderText');
        var playerOneName = players[0].textContent;
        var playerTwoName = players[1].textContent;
        var scores = $('.yellow.last.ml13-ScoreBoardColumn').children();
        var scoreOne = scores[1].textContent;
        var scoreTwo = scores[2].textContent;
        var playerOne = {
            name: playerOneName,
            score: scoreOne
        }
        var playerTwo = {
            name: playerTwoName,
            score: scoreTwo
        }
        var jsonObj = [];
        jsonObj.push(playerOne);
        jsonObj.push(playerTwo)
        var str = JSON.stringify(jsonObj);
        var tmp = 1 + '|' + str;
        console.info(tmp);
    });
    $('.ml13-Anims_H3Text').bind("DOMSubtreeModified",function(){
        var text = $('.ml13-Anims_H3Text');
        var player1 = text[0].textContent;
        var player2 = text[1].textContent;
        var str = "2"+"/" + player1 + "|" + player2;
        if ((player1 == null) &amp;&amp; (player2 == null))
            return false;
        console.log(str);
    });
}
 
function checkLoad() { 
    try {
        if ($('.yellow.last.ml13-ScoreBoardColumn').length == 1)
        {
            return true;
        }
        return false;
    } catch (error) {
        return false;
    }
 }
 
 function clickToTennis() {
    $('.ipo-Classification.sport_13').click();
 }
 
 function getScore() {
    var players = $('.ml13-ScoreBoard_HeaderText');
    var playerOneName = players[0].textContent;
    var playerTwoName = players[1].textContent;
    var scores = $('.yellow.last.ml13-ScoreBoardColumn').children();
    var scoreOne = scores[1].textContent;
    var scoreTwo = scores[2].textContent;
    var playerOne = {
        name: playerOneName,
        score: scoreOne
    }
    var playerTwo = {
        name: playerTwoName,
        score: scoreTwo
    }
    var jsonObj = [];
    jsonObj.push(playerOne);
    jsonObj.push(playerTwo)
    var str = JSON.stringify(jsonObj);
    return str;
 }
 
 function getMatches() {
    var jsonObj = [];
    var len = $('.ipo-Fixture_Truncator').length;
    var elems = $('.ipo-Fixture_Truncator');
    var index = 0;
    for (var i = 0; i &lt; len-2; i+=2)
    {  
        var player1 = elems[i].textContent;
        var player2 = elems[i+1].textContent;
        var players = {
            player1Name: player1,
            player2Name: player2,
            indexToClick: index
        }
        jsonObj.push(players);
        index++;
    }
    var str  = JSON.stringify(jsonObj);
    return str;
 }

function clickToMathes(index) {
    var elems =  $('.ipo-ViewSelectorContainer.ipo-ViewSelectorContainer_Cid-13');
    if (elems == null){
        return false;
    }
    var click = elems[index];
    click.click();
    return true;
}</value>
  </data>
  <data name="jsAllLoadSkybet" xml:space="preserve">
    <value>function getMarkets() { 
    try {
        console.log("Я тут");
        var jsonObj = [];
        $('#content &gt; div:nth-child(41) &gt; div:nth-child(2)').find("li").each(function() 
        {
                var playersName = jQuery.trim(this.textContent).split(" v ");
                var player1Name = playersName[0];
                var player2Name = playersName[1];
                var symbol = "*";
                if (player1Name.indexOf(symbol) &gt; -1)
                {
                    player1Name = player1Name.slice(0,player1Name.length-3);
                    player2Name = player2Name.slice(2,player2Name.length);
                }
                else{
                    player1Name = player1Name.slice(0,player1Name.length -2);
                    player2Name = player2Name.slice(3,player2Name.length);
                }
                player1Name = jQuery.trim(player1Name);
                player2Name = jQuery.trim(player2Name);
                var parseEventId = jQuery.trim($(this.children[0]).attr('href')).split("/");
                var eventId = parseEventId[4];
                var game = {
                    player1Name: player1Name,
                    player2Name: player2Name,
                    eventId: eventId
                }
                jsonObj.push(game);
        });  
        var str  = JSON.stringify(jsonObj);
        return str;
    }
    catch (error) {
        return "none  :" + error ;
    }
}

function checkLoad() { 
    try {
        if ($('.twitter-feed__items').length == 1)
        {
            return true;
        }
        return false;
    } catch (error) {
        return false;
    }
 }

var prevScoreOne = "";
var prevScoreTwo = "";
var isFirst = true;
function suscribeEventsScoresSkyBet() {
    $('.point.points').bind("DOMSubtreeModified",function(){
        var players = $('.current')[1].textContent;
        var tmpArray = jQuery.trim(players).split(" v ");
        var player1 = jQuery.trim(tmpArray[0]);
        var player2 = jQuery.trim(tmpArray[1]);
        var scores = $('.point.points');
        var score1 = scores[0].textContent;
        var score2 = scores[1].textContent;
        if ((score1 == '') || (score2 == '')) 
        {
            console.log("Empy: + " + score1 + ":" + score2);
            return "null1";
        }
        if (!isFirst)
        {
            if (((prevScoreOne != '0') || (prevScoreTwo != '0')) &amp;&amp; ( (prevScoreOne == "") || (prevScoreTwo == "")))
            {
                if ((score1 == '0') || (score2 == '0'))
                {
                    console.log("Empy2 currentScore = " + score1 + ":" + score2 + "PrevScore: " + prevScoreOne + ":" + prevScoreTwo);
                    return "null2"
                }
            }
        }
        isFirst = false;
        var parseEventId = jQuery.trim(window.location.pathname).split("/");
        var eventId = 
        {
            eventId: parseEventId[4]
        }
        var jsonObj = [];
        var playerOne = {
            playerName: player1,
            score: score1
        }
        var playerTwo = {
            playerName: player2,
            score: score2
        }
        jsonObj.push(eventId);
        jsonObj.push(playerOne);
        jsonObj.push(playerTwo)
        prevScoreOne = score1;
        prevScoreTwo = score2;
        var str = JSON.stringify(jsonObj);
        var tmp = 1 + '|' + str;
        console.info(tmp);
    });
    $('.scoreboard-header.no-bg.no-border.cell-highlight').first().bind("DOMSubtreeModified",function(){
        var infoMarket = $('.scoreboard-header.no-bg.no-border.cell-highlight').first().text()
        if (infoMarket == "") return false;
        var str = 2 + "|" + infoMarket;
        console.log(str);
    });
}

function getCurrentScore() {
    var players = $('.current')[1].textContent;
    var tmpArray = jQuery.trim(players).split(" v ");
    var player1 = jQuery.trim(tmpArray[0]);
    var player2 = jQuery.trim(tmpArray[1]);
    var scores = $('.point.points');
    var score1 = scores[0].textContent;
    var score2 = scores[1].textContent;
    var eventId = window.location.pathname;
    if ((score1 == '') || (score2 == '')) 
        return "null";
    if (((prevScoreOne != '0') || (prevScoreTwo != '0')) &amp;&amp; ( (prevScoreOne != "") || (prevScoreTwo != "")))
    {
        if ((score1 == '0') || (score2 == '0'))
            return "null"
    }
    var parseEventId = jQuery.trim(window.location.pathname).split("/");
    var eventId = 
    {
        eventId: parseEventId[4]
    };
    var jsonObj = [];
    var playerOne = {
        playerName: player1,
        score: score1,
    }
    var playerTwo = {
        playerName: player2,
        score: score2
    }
    jsonObj.push(eventId);
    jsonObj.push(playerOne);
    jsonObj.push(playerTwo)
    prevScoreOne = score1;
    prevScoreTwo = score2;
    var str = JSON.stringify(jsonObj);
    return str;
}


function checkLoaded() { 
     try {
        if ($('.promotions--list.js-accountbar-promotions-list').length == 1)
        {
            return true;
        }
        return false;
    } catch (error) {
        return false;
    }
 }</value>
  </data>
  <data name="loader_transparent" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\loader-transparent.gif;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="red" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\red.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="tennis_promo" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\tennis-promo.jpg;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="yellow" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\yellow.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
</root>